# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

require 'net/http'
require 'uri'
require 'json'

platform :ios do
  before_all do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
    ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "4"  
  end

  desc "打包 target"
  lane :customer_development do |to|
    local_branch = sh("git symbolic-ref --short -q HEAD").chomp
    remote_branch = "#{to[:branch]}"
    remote_branch = remote_branch.split("/").pop
    path = to[:path]
    puts "local_branch:#{local_branch}  remote_branch:#{remote_branch}"

    if local_branch == remote_branch
      puts "构建分支与本地分支一致"
    else
      git_commit(path:".", message:"切换分支#{remote_branch}前自动提交")
    end

    sh "git checkout #{remote_branch}"
    git_pull
    #自动增长 bulidNumber
    increment_build_number_in_plist(
      target: "#{ENV['SCHEME_NAME']}"
    )
    build_number = get_build_number_from_plist(target: "#{ENV['SCHEME_NAME']}")
    git_commit(path:".", message:"第#{build_number}次构建")
    sh "git push origin HEAD:#{remote_branch}"
    sh "rm -rf ../build"
    cocoapods(repo_update: false, use_bundle_exec: false)
    
    isDebug = "Release"
    if remote_branch["develop"]
      isDebug = "Debug"
    end

    # 是否是正式生产环境，正式生产环境特殊处理
    isProduction = false
    if remote_branch == "production"
      isProduction = true
    end
    sh "fastlane development debug:#{isDebug} path:#{path} isProduction:#{isProduction}"
  end
     
  desc "发布指定 Target 到 Fir.im"
  lane :development do |op|
    puts "debug === #{op[:debug]}"
    path = op[:path]
    build_app(
  		workspace: ENV['WORKSPACE_NAME'],
  		scheme: ENV['SCHEME_NAME'],
  		clean: true,
  		include_bitcode: false,
  		export_method: "development",
      configuration: op[:debug],
      output_directory: "build",
      output_name: "#{ENV['SCHEME_NAME']}",
      export_options: {
        method: "development",
        compileBitcode: false,
        provisioningProfiles: {
          ENV['APP_IDENTIFIER'] => ENV['PROVISIONINGPROFILES_DEVELOPMENT_NAME']
        }
      }
    )

    # 从 git log 中读取指定时间段内的日志当做更新日志
    #从缓存中读取上次打包时间
    lastArchiveDate = sh("cat #{op[:path]}/lastArchiveDate.log")
    sh("echo 'lastArchiveDate: #{lastArchiveDate}'")

    # 当前时间
    currentDate = `date`
    sh("echo 'currentDate: #{currentDate}'")

    #更新日志
    updateLog = sh("git log --after='#{lastArchiveDate}' --before='#{currentDate}' --pretty=format:'%s\n' HEAD")
    sh("echo 'updateLog: \n#{updateLog}'")


    # 上传到 Fir
    # 前往fir.im获取 api token, 将鼠标放置右上角账号上面, 在下拉窗选择API token
    # 若使用的蒲公英, 请前往 https://www.pgyer.com/ 查看上传方法
    # 如果使用Firimfile, 此处为 firim 即可
    # firim(firim_api_token:'xxx')

    # 多个参数 可以使用逗号(, )分离 
    isProduction = op[:isProduction]
    if isProduction
      env = "生产环境"
      answer = fir_cli api_token: ENV['FIR_PRE_PRO_TOKEN'], short: "#{ENV['SCHEME_NAME']}pro", changelog: "#{updateLog}"
    else
      if op[:debug] == "Debug"
        env = "测试环境"
        answer = fir_cli api_token: ENV['FIR_TOKEN'], short: "#{ENV['SCHEME_NAME']}dev", changelog: "#{updateLog}"
      else
        env = "预生产环境"
        answer = fir_cli api_token: ENV['FIR_PRO_TOKEN'], short: "#{ENV['SCHEME_NAME']}pre", changelog: "#{updateLog}"
      end
    end

    download_url = "http://d.firim.info/#{answer[:short]}}"

    # 获取更新下载二维码图片链接
    puts "上传后的结果： #{answer} "

    # 获取下载短连接
    puts "下载链接： #{download_url} "

    # 钉钉机器人
    app_patch   = "build/" + ENV['SCHEME_NAME']+".ipa"
    qrCodeImagePath = "#{path}/build/" + "fir-" + ENV['APP_NAME']+".png"
    puts "二维码图片path： #{qrCodeImagePath} "

    # 图片 base64 编码，并去除空行 \n 和空格
    qrcodeBase64Text = sh("openssl base64 -in #{qrCodeImagePath} | xargs echo -n | tr -d '[:space:]'")
    puts "二维码图片 base64: #{qrcodeBase64Text} "

    qrcodeBase64 = "data:image/png;base64,#{qrcodeBase64Text}"
    puts "图片 base64: #{qrcodeBase64} "

    app_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleShortVersionString")
    app_build_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleVersion")
    app_name    = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleDisplayName")
    app_url = download_url

    # 钉钉消息
    dingTalk_url = "https://oapi.dingtalk.com/robot/send?access_token=#{ENV['DING_TOKEN']}"

    # 构造消息格式
    actionCard = 
    {
      "actionCard": {
          "title": "iOS #{ENV['SCHEME_NAME']} #{app_version} (#{app_build_version}) 内测版", 
          "text": "![downloadQrCode](#{qrcodeBase64}) 
  ### iOS #{ENV['APP_NAME']} #{app_version} (bulid: #{app_build_version}) 内测版更新了 
  ##### 当前包名：#{ENV['APP_IDENTIFIER']}
  ##### 当前环境：#{env}
  **更新日志**\n\n #{updateLog} \n\n ", 
          "hideAvatar": "0", 
          "btnOrientation": "0", 
          "singleTitle": "下载地址",
          "singleURL": "#{app_url}"
      }, 
      "msgtype": "actionCard"
    }

    puts "发送的钉钉消息：#{actionCard} "



    uri = URI.parse(dingTalk_url)
    https = Net::HTTP.new(uri.host, uri.port)
    https.use_ssl = true

    request = Net::HTTP::Post.new(uri.request_uri)
    request.add_field('Content-Type', 'application/json')
    request.body = actionCard.to_json

    response = https.request(request)
    puts "------------------------------"
    puts "Response #{response.code} #{response.message}: #{response.body}"
  end

  error do |lane, exception|
    # 当执行一个lane结束，如果失败，就会执行到这里
    puts "lane：#{lane}"
    puts "exception：#{exception}"

    # 钉钉消息
    dingTalk_url = "https://oapi.dingtalk.com/robot/send?access_token=#{ENV['DING_TOKEN']}"

    # 构造消息格式
    actionCard = 
    {
      "msgtype": "markdown",
      "markdown": {
          "title":"iOS自动构建报错",
          "text": "#### 当前构建失败 \n> 报错lane：#{lane}\n> 报错信息：#{exception}"
      },
       "at": {
           "atMobiles": [
               "18119609246"
           ],
           "isAtAll": false
       }
    }

    puts "发送的钉钉消息：#{actionCard} "

    uri = URI.parse(dingTalk_url)
    https = Net::HTTP.new(uri.host, uri.port)
    https.use_ssl = true

    request = Net::HTTP::Post.new(uri.request_uri)
    request.add_field('Content-Type', 'application/json')
    request.body = actionCard.to_json

    response = https.request(request)
    puts "------------------------------"
    puts "Response #{response.code} #{response.message}: #{response.body}"
  end
end
